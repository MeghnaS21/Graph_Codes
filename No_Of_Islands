//FOR ALL 8 DIRECTIONS CHECK
// class Solution {
//     private:
//     void bfs(int row, int col, vector<vector<int>> &visited, vector<vector<char>>& grid){
//         visited[row][col]=1;
//         queue<pair<int,int>> q;
//         q.push({row, col});

//         int n = grid.size();
//         int m = grid[0].size();

//         while(!q.empty()){
//             int row = q.front().first;
//             int col = q.front().second;

//             q.pop();

//             for(int delrow = -1 ;delrow<=1;delrow++){
//                 for(int delcol=-1;delcol<=1;delcol++){
//                     int nrow = row+delrow;
//                     int ncol = col+delcol;

//                     if(nrow>=0 && nrow< n && ncol>=0 && ncol< m && !visited[nrow][ncol] &&
//                     grid[nrow][ncol]=='1'){
//                         visited[nrow][ncol]=1;
//                         q.push({nrow, ncol});
//                     }
//                 }
//             }
//         }
//     }
// public:
//     int numIslands(vector<vector<char>>& grid) {
//         int n=grid.size(); //rows
//         int m=grid[0].size(); //columns

//         vector<vector<int>> visited(n, vector<int>(m, 0)); //created visited array
//         int cnt = 0;
//         for(int i=0;i<n;i++){
//             for(int j=0;j<m;j++){
//                 if(!visited[i][j] && grid[i][j]=='1'){
//                     cnt++;
//                     bfs(i, j, visited, grid);
//                 }
//             }
//         }
//         return cnt;

//     }
// };

//FOR 4 DIRECTIONS ONLY. UP DOWN RIGHT LEFT


class Solution {
private:
    void dfs(int startNode, vector<int> adjLs[], vector<int>& visited) {
        visited[startNode] = 1;
        for(auto neighbour : adjLs[startNode]) {
            if(!visited[neighbour]) {
                dfs(neighbour, adjLs, visited);
            }
        }
    }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int nodesCount = isConnected.size();

        // converting matrix to adjacency list
        vector<int> adjLs[nodesCount];
        for(int i = 0; i < nodesCount; i++) {
            for(int j = 0; j < nodesCount; j++) {
                if(isConnected[i][j] == 1 && i != j) {
                    adjLs[i].push_back(j);
                    adjLs[j].push_back(i);
                }
            }
        }

        vector<int> visited(nodesCount, 0);
        int count = 0;
        for(int i = 0; i < nodesCount; i++) {
            if(!visited[i]) {
                count++;
                dfs(i, adjLs, visited);
            }
        }
        return count;
    }
};
